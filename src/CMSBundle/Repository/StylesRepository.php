<?php

namespace CMSBundle\Repository;

use CMSBundle\Entity\Styles;

/**
 * StylesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StylesRepository extends \Doctrine\ORM\EntityRepository
{
    public function findOnePopulateBy(array $criteria)
    {
        /**
         * @var Styles $style
         */
        $style = $this->findOneBy($criteria);
        if ($style == null){
            $style = new Styles();
            $style->setPosition($criteria['position']);
        }
        if ($style->getBorders()!= null){
            foreach ( $style->getBorders() as $border => $value){
                if ($border == 'top'){$style->setTopBorder($value);}
                elseif ($border == 'bottom'){$style->setBottomBorder($value);}
                elseif ($border == 'left'){$style->setLeftBorder($value);}
                elseif ($border == 'right'){$style->setRightBorder($value);}
            }
        }
        if ($style->getMargin()!= null){
            foreach ( $style->getMargin() as $margin => $value){
                if ($margin == 'top'){$style->setTopMargin($value);}
                elseif ($margin == 'bottom'){$style->setBottomMargin($value);}
                elseif ($margin == 'left'){$style->setLeftMargin($value);}
                elseif ($margin == 'right'){$style->setRightMargin($value);}
            }
        }
        if ($style->getPadding()!= null){
            foreach ( $style->getPadding() as $padding => $value){
                if ($padding == 'top'){$style->setTopPadding($value);}
                elseif ($padding == 'bottom'){$style->setBottomPadding($value);}
                elseif ($padding == 'left'){$style->setLeftPadding($value);}
                elseif ($padding == 'right'){$style->setRightPadding($value);}
            }
        }
        if ($style->getSize()!= null){
            foreach ($style->getSize() as $size => $value){
                if ($size == 'minWidth'){$style->setMinWidth($value);}
                elseif ($size == 'maxWidth'){$style->setMaxWidth($value);}
                elseif ($size == 'minHeight'){$style->setMinHeight($value);}
                elseif ($size == 'maxHeight'){$style->setMaxHeight($value);}
            }
        }
        return $style;
    }
}
